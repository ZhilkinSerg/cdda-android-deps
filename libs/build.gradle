
apply plugin: 'com.android.library'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def njobs = getProperty("j")
if (localProperties.getProperty('j') != null) {
    njobs = localProperties.getProperty("j")
}

def abi_arm_32 = getProperty("abi_arm_32").toBoolean()
if (localProperties.getProperty('abi_arm_32') != null) {
    abi_arm_32 = localProperties.getProperty("abi_arm_32").toBoolean()
}

def abi_arm_64 = getProperty("abi_arm_64").toBoolean()
if (localProperties.getProperty('abi_arm_64') != null) {
    abi_arm_64 = localProperties.getProperty("abi_arm_64").toBoolean()
}

def abi_x86_32 = getProperty("abi_x86_32").toBoolean()
if (localProperties.getProperty('abi_x86_32') != null) {
    abi_x86_32 = localProperties.getProperty("abi_x86_32").toBoolean()
}

def abi_x86_64 = getProperty("abi_x86_64").toBoolean()
if (localProperties.getProperty('abi_x86_64') != null) {
    abi_x86_64 = localProperties.getProperty("abi_x86_64").toBoolean()
}

def override_compileSdkVersion = getProperty("override_compileSdkVersion").toInteger()
if (localProperties.getProperty('override_compileSdkVersion') != null) {
    override_compileSdkVersion = localProperties.getProperty("override_compileSdkVersion").toInteger()
}

def override_minSdkVersion = getProperty("override_minSdkVersion").toInteger()
if (localProperties.getProperty('override_minSdkVersion') != null) {
    override_minSdkVersion = localProperties.getProperty("override_minSdkVersion").toInteger()
}

def override_targetSdkVersion = getProperty("override_targetSdkVersion").toInteger()
if (localProperties.getProperty('override_targetSdkVersion') != null) {
    override_targetSdkVersion = localProperties.getProperty("override_targetSdkVersion").toInteger()
}

def override_ndkBuildAppPlatform = getProperty("override_ndkBuildAppPlatform")
if (localProperties.getProperty('override_ndkBuildAppPlatform') != null) {
    override_ndkBuildAppPlatform = localProperties.getProperty("override_ndkBuildAppPlatform")
}

println("Using [              njobs]: $njobs")
println("Using [  compileSdkVersion]: $override_compileSdkVersion")
println("Using [      minSdkVersion]: $override_minSdkVersion")
println("Using [   targetSdkVersion]: $override_targetSdkVersion")
println("Using [ndkBuildAppPlatform]: $override_ndkBuildAppPlatform")
println("Using [         abi_arm_32]: $abi_arm_32")
println("Using [         abi_arm_64]: $abi_arm_64")
println("Using [         abi_x86_32]: $abi_x86_32")
println("Using [         abi_x86_64]: $abi_x86_64")

if (!abi_arm_32 && !abi_arm_64 && !abi_x86_32 && !abi_x86_64) {
    throw new GradleException("All supported ABI properties are set to false!")
}

android {
    compileSdkVersion override_compileSdkVersion
    defaultConfig {
        minSdkVersion override_minSdkVersion
        targetSdkVersion override_targetSdkVersion
        versionCode 1
        splits {
            // Configures multiple APKs based on ABI.
            abi {
                // Enables building multiple APKs per ABI.
                enable true
                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()
                // Specifies a list of ABIs that Gradle should create APKs for.
                if (abi_arm_32) {
                    include "armeabi-v7a"
                }
                if (abi_arm_64) {
                    include "arm64-v8a"
                }
                if (abi_x86_32) {
                    include "x86"
                }
                if (abi_x86_64) {
                    include "x86_64"
                }
                // Specifies that we do not want to also generate a universal APK that includes all ABIs.
                universalApk false
            }
        }
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=$override_ndkBuildAppPlatform", "-j$njobs"
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            externalNativeBuild {
                ndkBuild {
                    cFlags "-DPNG_ARM_NEON_OPT=0", "-O3", "-DNEBUG"
                }
            }
        }
        debug {
            externalNativeBuild {
                ndkBuild {
                    cFlags "-DPNG_ARM_NEON_OPT=0"
                }
            }
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
       
    }
    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "cddadeps-${variant.name}.aar"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
}
